// Generated by CoffeeScript 1.7.1
(function() {
  var Response, client, config, handler;

  config = require('../config');

  client = require('snapper').client;

  client.use('redis', config.snapper);

  handler = require('err1st').handler.validate(require('../config/error'));

  Response = (function() {
    function Response(params) {
      var k, v;
      if (params == null) {
        params = {};
      }
      this._params = {};
      this.replied = false;
      for (k in params) {
        v = params[k];
        this.set(k, v);
      }
    }

    Response.prototype.get = function(key) {
      if (key != null) {
        return this._params[key];
      } else {
        return this._params;
      }
    };

    Response.prototype.set = function(key, val) {
      this._params[key] = val;
      return this._params;
    };

    Response.prototype.parse = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      if (this.get('err') != null) {
        return this._error(callback);
      } else {
        return this._success(callback);
      }
    };

    Response.prototype._error = function(callback) {
      var err;
      if (callback == null) {
        callback = function() {};
      }
      err = handler.parse(this.get('err'));
      return callback(err.toStatus(), err.toJSON());
    };

    Response.prototype._success = function(callback) {
      if (callback == null) {
        callback = function() {};
      }
      return callback(200, this.get('result'));
    };

    Response.prototype.broadcast = function(room, event, data) {
      if (event.indexOf(':') !== 0) {
        event = ':' + event;
      }
      return client.broadcast(this._getRoom(room), JSON.stringify({
        a: event,
        d: data
      }), this.get('socketId'));
    };

    Response.prototype.publish = function(room, event, data) {
      if (event.indexOf(':') !== 0) {
        event = ':' + event;
      }
      return client.broadcast(this._getRoom(room), JSON.stringify({
        a: event,
        d: data
      }));
    };

    Response.prototype.join = function(room) {
      return client.join(this.get('socketId'), this._getRoom(room));
    };

    Response.prototype.leave = function(room) {
      return client.leave(this.get('socketId'), this._getRoom(room));
    };

    Response.prototype._getRoom = function(room) {
      if (typeof room === 'string') {
        room = "talk:" + room;
      } else if (room instanceof Array) {
        room = room.map(function(room) {
          return "talk:" + room;
        });
      }
      return room;
    };

    Response.prototype.json = function() {
      var res;
      res = this.get('res');
      return this.parse((function(_this) {
        return function(status, data) {
          if (!_this.replied) {
            res.status(status).json(data);
            return _this.replied = true;
          }
        };
      })(this));
    };

    Response.prototype.redirect = function() {
      var res;
      res = this.get('res');
      res.redirect.apply(res, arguments);
      return this.replied = true;
    };

    Response.prototype.cookie = function() {
      var res;
      res = this.get('res');
      return res.cookie.apply(res, arguments);
    };

    return Response;

  })();

  module.exports = Response;

}).call(this);
