// Generated by CoffeeScript 1.7.1
(function() {
  var Request, validator, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  _ = require('lodash');

  validator = require('validator');

  Request = (function() {
    var allowdKeys, importKeys;

    importKeys = ['_sessionUserId', 'session', 'cookies'];

    allowdKeys = _.uniq(importKeys.concat(['lang', '_id', '_roomId', '_userId', '_teamId', '_toId', 'maxDate', 'minDate', 'token', 'title', 'content', 'name', 'socketId', 'limit', 'page', 'accessToken', 'clientId', 'clientSecret', 'password', 'email', 'source', 'topic', 'avatarUrl', 'inviteCode', 'nextUrl', 'mobile', 'notification', 'category', 'fileKey', 'fileName', 'fileType', '_messageId', 'desktopNotification', 'emailNotification', 'isDone']));

    Request.prototype.alias = {
      'x-socket-id': 'socketId',
      '_withid': '_toId'
    };

    Request.prototype.validators = {
      _general: function(val, key) {
        var date;
        if (key.match(/^_.*id$/i)) {
          if (("" + val).match(/[0-9a-f]{24}/)) {
            return val;
          } else {
            return null;
          }
        }
        if (key.match(/Date$/i)) {
          date = new Date(val);
          if (date.getDate()) {
            return date;
          } else {
            return null;
          }
        }
        if (key.match(/url$/i)) {
          if (validator.isURL(val)) {
            return val;
          } else {
            return null;
          }
        }
        return val;
      },
      limit: function(limit) {
        limit = parseInt(limit);
        if ((0 < limit && limit < 30)) {
          return limit;
        }
        return null;
      },
      email: function(email) {
        email = email.trim();
        if (!validator.isEmail(email)) {
          return null;
        }
        return email;
      }
    };

    Request.prototype.setters = {};

    function Request(params) {
      var k, v;
      if (params == null) {
        params = {};
      }
      this._params = {};
      for (k in params) {
        v = params[k];
        this.set(k, v);
      }
    }

    Request.prototype.get = function(key) {
      if (key != null) {
        return this._params[key];
      } else {
        return this._params;
      }
    };

    Request.prototype.set = function(key, val, force) {
      var aliasKey, _validator;
      if (force == null) {
        force = false;
      }
      aliasKey = this.alias[key.toLowerCase()];
      if (aliasKey != null) {
        key = aliasKey;
      }
      if (typeof this.setters[key] === 'function') {
        return this.setters[key].call(this, val);
      }
      _validator = this.validators[key] || this.validators['_general'];
      if (_validator != null) {
        val = _validator(val, key);
      }
      if (val === null) {
        return this._params;
      }
      if (__indexOf.call(allowdKeys, key) >= 0 || force) {
        this._params[key] = val;
      }
      if (__indexOf.call(importKeys, key) >= 0) {
        this[key] = val;
      }
      return this._params;
    };

    Request.prototype.remove = function() {
      var key, keys, _i, _len;
      keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        delete this._params[key];
        delete this[key];
      }
      return this._params;
    };

    return Request;

  })();

  module.exports = Request;

}).call(this);
