// Generated by CoffeeScript 1.7.1
(function() {
  var $path, Request, Response, Router, api, async, backbone, inflection, router, _;

  _ = require('lodash');

  async = require('async');

  inflection = require('inflection');

  Response = require('./response');

  Request = require('./request');

  backbone = require('./backbone');

  $path = require('path');

  api = require('./api');

  Router = (function() {
    var _parseDsl, _resource;

    function Router(app) {
      this.app = app;
    }

    Router.prototype.middlewares = [];

    Router.prototype.prefix = null;

    _resource = function(ctrl) {
      ctrl = inflection.pluralize(ctrl);
      return {
        readOne: {
          method: 'get',
          path: "/" + ctrl + "/:_id"
        },
        read: {
          method: 'get',
          path: "/" + ctrl
        },
        create: {
          method: 'post',
          path: "/" + ctrl
        },
        update: {
          method: 'put',
          path: "/" + ctrl + "/:_id"
        },
        "delete": {
          method: 'delete',
          path: "/" + ctrl + "/:_id"
        }
      };
    };

    _parseDsl = function(path, options) {
      var action, ctrl, to, _ref;
      if (options == null) {
        options = {};
      }
      if (arguments.length === 2) {
        options.path = path;
        to = options.to;
        if (to != null) {
          _ref = to.split('#'), ctrl = _ref[0], action = _ref[1];
          action || (action = 'index');
          options.ctrl || (options.ctrl = ctrl);
          options.action || (options.action = action);
        }
      } else {
        options = path;
      }
      return options;
    };

    Router.prototype.callback = function(req, res) {
      return res.json();
    };

    Router.prototype.resource = function(ctrl, options) {
      var action, except, map, only, opt, _options, _results;
      if (options == null) {
        options = {};
      }
      map = _resource(ctrl);
      only = options.only, except = options.except;
      if (only != null) {
        map = _.pick(map, only);
      } else if (except != null) {
        map = _.omit(map, except);
      }
      _results = [];
      for (action in map) {
        opt = map[action];
        _options = _.extend(options, {
          ctrl: ctrl,
          action: action,
          method: opt.method,
          path: opt.path
        });
        _results.push(this._apply(options));
      }
      return _results;
    };

    Router.prototype.get = function() {
      var options;
      options = _parseDsl.apply(this, arguments);
      options.method = 'get';
      return this._apply(options);
    };

    Router.prototype.post = function() {
      var options;
      options = _parseDsl.apply(this, arguments);
      options.method = 'post';
      return this._apply(options);
    };

    Router.prototype.put = function() {
      var options;
      options = _parseDsl.apply(this, arguments);
      options.method = 'put';
      return this._apply(options);
    };

    Router.prototype["delete"] = function() {
      var options;
      options = _parseDsl.apply(this, arguments);
      options.method = 'delete';
      return this._apply(options);
    };

    Router.prototype.options = function() {
      var options;
      options = _parseDsl.apply(this, arguments);
      options.method = 'options';
      return this._apply(options);
    };

    Router.prototype._apply = function(options) {
      var $ctrl, action, callback, ctrl, method, middlewares, path;
      if (options == null) {
        options = {};
      }
      ctrl = options.ctrl, action = options.action, method = options.method, path = options.path, middlewares = options.middlewares, callback = options.callback;
      middlewares || (middlewares = this.middlewares);
      callback || (callback = this.callback);
      action || (action = 'index');
      $ctrl = require("../controllers/" + ctrl);
      if (typeof $ctrl[action] !== 'function') {
        return false;
      }
      if (typeof path === 'string' && this.prefix) {
        path = '/' + $path.join(this.prefix, path);
      }
      api.set("" + ctrl + "." + action, {
        path: path,
        method: method,
        ensure: $ctrl[action].ensure
      });
      return this.app[method](path, function(req, res) {
        var params, _ref, _req, _res;
        params = _.extend(req.headers, req.cookies, req.params, req.query, req.body, req.session);
        params.session = req.session;
        params.cookies = req.cookies;
        if (((_ref = req.headers) != null ? _ref['authorization'] : void 0) && req.headers['authorization'].indexOf('token') !== -1) {
          params.accessToken = req.headers['authorization'].replace('token', '').trim();
        }
        _req = new Request(params);
        _res = new Response({
          res: res
        });
        return backbone($ctrl, ctrl, action, middlewares, _req, _res, callback);
      });
    };

    return Router;

  })();

  router = function(app) {
    return new Router(app);
  };

  module.exports = router;

}).call(this);
