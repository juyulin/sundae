// Generated by CoffeeScript 1.7.1
(function() {
  var Router, async, backbone, inflection, p, router, _;

  _ = require('lodash');

  async = require('async');

  inflection = require('inflection');

  backbone = require('./backbone');

  p = require('path');

  Router = (function() {
    var _parseDsl;

    function Router() {
      this._controllers = {};
      this._stack = [];
    }

    Router.prototype.middlewares = [];

    Router.prototype.prefix = null;

    Router.prototype._resource = function(ctrl) {
      ctrl = inflection.pluralize(ctrl);
      return {
        readOne: {
          method: 'get',
          path: "/" + ctrl + "/:_id"
        },
        read: {
          method: 'get',
          path: "/" + ctrl
        },
        create: {
          method: 'post',
          path: "/" + ctrl
        },
        update: {
          method: 'put',
          path: "/" + ctrl + "/:_id"
        },
        remove: {
          method: 'delete',
          path: "/" + ctrl + "/:_id"
        }
      };
    };

    _parseDsl = function(path, options) {
      var action, ctrl, to, _ref;
      if (options == null) {
        options = {};
      }
      if (arguments.length === 2) {
        options.path = path;
        to = options.to;
        if (to != null) {
          _ref = to.split('#'), ctrl = _ref[0], action = _ref[1];
          action || (action = 'index');
          options.ctrl || (options.ctrl = ctrl);
          options.action || (options.action = action);
        }
      } else {
        options = path;
      }
      return options;
    };

    Router.prototype.callback = function(req, res) {
      return res.response();
    };

    Router.prototype.resource = function(ctrl, options) {
      var action, except, map, only, opt, _options, _results;
      if (options == null) {
        options = {};
      }
      map = this._resource(ctrl);
      only = options.only, except = options.except;
      if (only != null) {
        map = _.pick(map, only);
      } else if (except != null) {
        map = _.omit(map, except);
      }
      _results = [];
      for (action in map) {
        opt = map[action];
        _options = _.extend(options, {
          ctrl: ctrl,
          action: action,
          method: opt.method,
          path: opt.path
        });
        _results.push(this._apply(_options));
      }
      return _results;
    };

    Router.prototype.get = function() {
      var options;
      options = _parseDsl.apply(this, arguments);
      options.method = 'get';
      return this._apply(options);
    };

    Router.prototype.post = function() {
      var options;
      options = _parseDsl.apply(this, arguments);
      options.method = 'post';
      return this._apply(options);
    };

    Router.prototype.put = function() {
      var options;
      options = _parseDsl.apply(this, arguments);
      options.method = 'put';
      return this._apply(options);
    };

    Router.prototype["delete"] = function() {
      var options;
      options = _parseDsl.apply(this, arguments);
      options.method = 'delete';
      return this._apply(options);
    };

    Router.prototype.options = function() {
      var options;
      options = _parseDsl.apply(this, arguments);
      options.method = 'options';
      return this._apply(options);
    };

    Router.prototype._loadCtrl = function(ctrl) {
      var e, fn, key, mixer, mixers, sundae, _ctrl, _fn, _i, _len, _mainPath;
      if (!this._controllers[ctrl]) {
        sundae = require('./sundae');
        _mainPath = sundae.get('mainPath');
        _ctrl = require(p.join(_mainPath, "controllers/" + ctrl));
        mixers = _ctrl.mixers || ctrl;
        if (toString.call(mixers) === '[object String]') {
          mixers = mixers.split(new RegExp(' +'));
        }
        if (mixers.indexOf(ctrl) === -1) {
          mixers.unshift(ctrl);
        }
        for (_i = 0, _len = mixers.length; _i < _len; _i++) {
          mixer = mixers[_i];
          try {
            mixer = require(p.join(_mainPath, "mixers/" + mixer));
            _fn = function(key, fn) {
              if ((_ctrl[key] == null) && typeof fn === 'function') {
                return _ctrl[key] = function() {
                  return fn.apply(_ctrl, arguments);
                };
              }
            };
            for (key in mixer) {
              fn = mixer[key];
              _fn(key, fn);
            }
          } catch (_error) {
            e = _error;
          }
        }
        this._controllers[ctrl] = _ctrl;
      }
      return this._controllers[ctrl];
    };

    Router.prototype._apply = function(options) {
      var action, callback, ctrl, method, middlewares, path, _ctrl, _ref;
      if (options == null) {
        options = {};
      }
      ctrl = options.ctrl, action = options.action, method = options.method, path = options.path, middlewares = options.middlewares, callback = options.callback;
      middlewares || (middlewares = this.middlewares);
      callback || (callback = this.callback);
      action || (action = 'index');
      _ctrl = this._loadCtrl(ctrl);
      if (typeof _ctrl[action] !== 'function') {
        return false;
      }
      if (toString.call(path) === '[object String]' && this.prefix) {
        path = '/' + p.join(this.prefix, path);
      }
      this._stack.push({
        path: path,
        method: method,
        _ctrl: _ctrl,
        ctrl: ctrl,
        action: action
      });
      return (_ref = this.app) != null ? _ref[method](path, function(req, res, next) {
        var k, v, _params;
        _params = _.extend(req.headers || {}, req.cookies || {}, req.params || {}, req.query || {}, req.body || {}, req.session || {});
        req._params = {};
        for (k in _params) {
          v = _params[k];
          req.set(k, v);
        }
        req._ctrl = _ctrl;
        req.ctrl = ctrl;
        req.action = action;
        req.middlewares = middlewares;
        return backbone(req, res, callback);
      }) : void 0;
    };

    Router.prototype.http404 = function(req, res, next) {
      return res.status(404).json({
        message: 'Not Found'
      });
    };

    Router.prototype.http500 = function(err, req, res, next) {
      return res.status(500).json({
        message: (err != null ? err.message : void 0) || 'Internal Server Error'
      });
    };

    return Router;

  })();

  router = new Router;

  router.config = function(app, fn) {
    router.app = app;
    if (typeof fn === "function") {
      fn(router);
    }
    app.use(router.http404);
    return app.use(router.http500);
  };

  router.key = 'routes';

  router.Router = Router;

  module.exports = router;

}).call(this);
