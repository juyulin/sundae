// Generated by CoffeeScript 1.7.1
(function() {
  var request, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  _ = require('lodash');

  request = require('express').request;

  request.config = function(app, fn) {
    if (fn == null) {
      fn = function() {};
    }
    request.get = function(key) {
      if (key != null) {
        return this.params[key];
      } else {
        return this.params;
      }
    };
    request.set = function(key, val, force) {
      var aliasKey, _validator;
      if (force == null) {
        force = false;
      }
      aliasKey = this.alias[key.toLowerCase()];
      if (aliasKey != null) {
        key = aliasKey;
      }
      if (typeof this.setters[key] === 'function') {
        return this.setters[key].call(this, val);
      }
      _validator = this.validators[key] || this.validators['_general'];
      if ((_validator != null) && !_validator(val, key)) {
        return this;
      }
      if (__indexOf.call(this.allowedKeys, key) >= 0 || force) {
        this.params[key] = val;
      }
      if (__indexOf.call(this.importKeys, key) >= 0) {
        this[key] = val;
      }
      return this;
    };
    request.remove = function() {
      var key, keys, _i, _len;
      keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        delete this.params[key];
        delete this[key];
      }
      return true;
    };
    fn.call(request, request);
    return app.use(function(req, res, next) {
      var k, v, _params;
      _params = _.extend(req.headers || {}, req.cookies || {}, req.params || {}, req.query || {}, req.body || {}, req.session || {});
      req.params = {};
      for (k in _params) {
        v = _params[k];
        req.set(k, v);
      }
      return next();
    });
  };

  module.exports = request;

}).call(this);
