// Generated by CoffeeScript 1.7.1
(function() {
  var Err, e, request, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  _ = require('lodash');

  request = require('express').request;

  try {
    Err = require('err1st');
  } catch (_error) {
    e = _error;
    Err = Error;
  }

  request.config = function(app, fn) {
    if (fn == null) {
      fn = function() {};
    }
    request.importKeys = [];
    request.allowedKeys = [];
    request.alias = {};
    request.validators = {};
    request.setters = {};
    request.get = function(key) {
      if (this._params == null) {
        this._params = {};
      }
      if (key != null) {
        return this._params[key];
      } else {
        return this._params;
      }
    };
    request.set = function(key, val, force) {
      var aliasKey, _validator;
      if (force == null) {
        force = false;
      }
      if (this._params == null) {
        this._params = {};
      }
      aliasKey = this.alias[key.toLowerCase()];
      if (aliasKey != null) {
        key = aliasKey;
      }
      if (typeof this.setters[key] === 'function') {
        return this.setters[key].call(this, val);
      }
      if (!(__indexOf.call(this.allowedKeys, key) >= 0 || force)) {
        return this;
      }
      _validator = this.validators[key] || this.validators['_general'];
      if ((_validator != null) && !_validator(val, key)) {
        return new Err('INVALID_PARAMS', key);
      }
      this._params[key] = val;
      if (__indexOf.call(this.importKeys, key) >= 0) {
        this[key] = val;
      }
      return this;
    };
    request.remove = function() {
      var key, keys, _i, _len;
      keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        delete this._params[key];
        delete this[key];
      }
      return true;
    };
    return fn.call(request, request);
  };

  module.exports = request;

}).call(this);
