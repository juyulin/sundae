// Generated by CoffeeScript 1.7.1
(function() {
  var options, request, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  _ = require('lodash');

  options = {
    importKeys: [],
    allowedKeys: [],
    alias: {},
    validators: {},
    setters: {}
  };

  request = function(req, res, next) {
    var k, v, _params;
    req.get = function(key) {
      if (key != null) {
        return req.params[key];
      } else {
        return req.params;
      }
    };
    req.set = function(key, val, force) {
      var aliasKey, _validator;
      if (force == null) {
        force = false;
      }
      aliasKey = options.alias[key.toLowerCase()];
      if (aliasKey != null) {
        key = aliasKey;
      }
      if (typeof options.setters[key] === 'function') {
        return options.setters[key].call(req, val);
      }
      _validator = options.validators[key] || options.validators['_general'];
      if ((_validator != null) && !_validator(val, key)) {
        return req;
      }
      if (__indexOf.call(options.allowedKeys, key) >= 0 || force) {
        req.params[key] = val;
      }
      if (__indexOf.call(options.importKeys, key) >= 0) {
        req[key] = val;
      }
      return req;
    };
    req.remove = function() {
      var key, keys, _i, _len;
      keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        delete req.params[key];
        delete req[key];
      }
      return true;
    };
    _params = _.extend(req.headers || {}, req.cookies || {}, req.params || {}, req.query || {}, req.body || {}, req.session || {});
    req.params = {};
    for (k in _params) {
      v = _params[k];
      req.set(k, v);
    }
    return next();
  };

  request.configer = function(app, fn) {
    if (fn == null) {
      fn = function() {};
    }
    fn.call(options, options);
    return app.use(request);
  };

  module.exports = request;

}).call(this);
