// Generated by CoffeeScript 1.7.1
(function() {
  var Request, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  _ = require('lodash');

  Request = (function() {
    Request.importKeys = [];

    Request.allowedKeys = [];

    Request.alias = {};

    Request.validators = {};

    Request.setters = {};

    function Request(req) {
      var k, params, v;
      if (req == null) {
        req = {};
      }
      this.remove = __bind(this.remove, this);
      this.set = __bind(this.set, this);
      this.get = __bind(this.get, this);
      this.__proto__ = req;
      this._params = {};
      params = _.extend(this.headers || {}, this.cookies || {}, this.params || {}, this.query || {}, this.body || {}, this.session || {});
      for (k in params) {
        v = params[k];
        this.set(k, v);
      }
    }

    Request.prototype.get = function(key) {
      if (key != null) {
        return this._params[key];
      } else {
        return this._params;
      }
    };

    Request.prototype.set = function(key, val, force) {
      var aliasKey, _validator;
      if (force == null) {
        force = false;
      }
      aliasKey = Request.alias[key.toLowerCase()];
      if (aliasKey != null) {
        key = aliasKey;
      }
      if (typeof Request.setters[key] === 'function') {
        return Request.setters[key].call(this, val);
      }
      _validator = Request.validators[key] || Request.validators['_general'];
      if ((_validator != null) && !_validator(val, key)) {
        return this;
      }
      if (__indexOf.call(Request.allowedKeys, key) >= 0 || force) {
        this._params[key] = val;
      }
      if (__indexOf.call(Request.importKeys, key) >= 0) {
        this[key] = val;
      }
      return this;
    };

    Request.prototype.remove = function() {
      var key, keys, _i, _len;
      keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        delete this._params[key];
        delete this[key];
      }
      return this._params;
    };

    return Request;

  })();

  module.exports = Request;

}).call(this);
