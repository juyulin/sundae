// Generated by CoffeeScript 1.7.1
(function() {
  var BaseController, after, before, ensure, select, util, _, _insertCallbacks, _mix, _mixin, _normalizeOptions,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  _ = require('lodash');

  util = require('./util');

  _mix = function(base, target) {
    var ignores, key, prop;
    ignores = ['__super__', 'constructor'];
    for (key in target) {
      prop = target[key];
      if (hasOwnProperty.call(target, key) && __indexOf.call(ignores, key) < 0) {
        base[key] = prop;
      }
    }
    return base;
  };

  _mixin = function(child, parent) {
    _mix(child, parent);
    _mix(child.prototype, parent.prototype);
    return child;
  };

  _normalizeOptions = function(options) {
    var except, only;
    only = options.only, except = options.except;
    options.only = util._toArray(only);
    options.except = util._toArray(except);
    options.parallel || (options.parallel = false);
    return options;
  };

  _insertCallbacks = function(fn, props) {
    var except, only, options, parallel, _applyCallback, _fn, _ref;
    if (props == null) {
      props = [];
    }
    if (toString.call(props) === '[object Arguments]') {
      props = Array.prototype.slice.call(props, 0);
    }
    if (!this._beforeActions) {
      this._beforeActions = [];
    }
    if (!this._afterActions) {
      this._afterActions = [];
    }
    options = toString.call(props[props.length - 1]) === '[object Object]' ? props.pop() : {};
    _ref = _normalizeOptions(options), only = _ref.only, except = _ref.except, parallel = _ref.parallel;
    _fn = fn(props);
    _applyCallback = function() {
      var action, args, next, req, result;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      next = args.pop();
      req = args[0];
      action = req.action;
      result = toString.call(args[2]) === '[object Function]' ? {} : args[2];
      if ((!_.isEmpty(only) && __indexOf.call(only, action) < 0) || (!_.isEmpty(except) && __indexOf.call(except, action) >= 0)) {
        return next(null, result);
      } else if (parallel) {
        _fn.apply(this, args);
        return next(null, result);
      } else {
        return _fn.apply(this, arguments);
      }
    };
    if (fn.before) {
      this._beforeActions.push(_applyCallback);
    }
    if (fn.after) {
      return this._afterActions.push(_applyCallback);
    }
  };

  ensure = require('./decorators/ensure');

  before = require('./decorators/before');

  after = require('./decorators/after');

  select = require('./decorators/select');

  BaseController = (function() {
    function BaseController() {}

    BaseController.mixin = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return args.forEach((function(_this) {
        return function(parent) {
          return _mixin(_this, parent);
        };
      })(this));
    };

    BaseController.ensure = function() {
      return _insertCallbacks.call(this, ensure, arguments);
    };

    BaseController.before = function() {
      return _insertCallbacks.call(this, before, arguments);
    };

    BaseController.after = function() {
      return _insertCallbacks.call(this, after, arguments);
    };

    BaseController.select = function() {
      return _insertCallbacks.call(this, select, arguments);
    };

    return BaseController;

  })();

  module.exports = BaseController;

}).call(this);
