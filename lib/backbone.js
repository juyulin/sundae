// Generated by CoffeeScript 1.7.1
(function() {
  var async, backbone;

  async = require('async');

  backbone = function(req, res, callback) {
    var $ctrl, action, middlewares;
    $ctrl = req.$ctrl, action = req.action, middlewares = req.middlewares;
    return async.waterfall([
      function(next) {
        return async.eachSeries(middlewares, function(fn, next) {
          return fn(req, res, next);
        }, next);
      }, function(next) {
        return async.eachSeries(backbone.middlewares, function(fn, next) {
          var key;
          if (!fn.before) {
            return next();
          }
          key = $ctrl[action][fn.key] || $ctrl[action];
          if (fn.parallel) {
            fn(req, res, key);
            return next();
          } else {
            return fn(req, res, key, next);
          }
        }, next);
      }, function(next) {
        if ($ctrl[action].length === 3) {
          return $ctrl[action](req, res, next);
        } else {
          return $ctrl[action](req, next);
        }
      }, function(result, next) {
        return async.reduce(backbone.middlewares, result, function(result, fn, next) {
          var key;
          if (!fn.after) {
            return next(null, result);
          }
          key = $ctrl[action][fn.key] || $ctrl[action];
          if (fn.parallel) {
            fn(req, res, key, result);
            return next(null, result);
          } else {
            return fn(req, res, key, result, next);
          }
        }, next);
      }
    ], callback);
  };

  backbone.config = function(app, fn) {
    return fn.call(backbone, backbone);
  };

  backbone.middlewares = [];

  module.exports = backbone;

}).call(this);
