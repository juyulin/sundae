// Generated by CoffeeScript 1.7.1
(function() {
  var async, backbone;

  async = require('async');

  backbone = function(req, res, callback) {
    var action, decorators, middlewares, _ctrl;
    _ctrl = req._ctrl, action = req.action, middlewares = req.middlewares;
    decorators = _ctrl.decorators || [];
    middlewares || (middlewares = []);
    return async.waterfall([
      function(next) {
        return async.eachSeries(middlewares, function(fn, next) {
          return fn(req, res, next);
        }, next);
      }, function(next) {
        return async.eachSeries(decorators, function(fn, next) {
          var key;
          if (!fn.before) {
            return next();
          }
          key = _ctrl[action][fn.key] || _ctrl[action];
          if (fn.parallel) {
            fn(req, res, key);
            return next();
          } else {
            return fn(req, res, key, next);
          }
        }, next);
      }, function(next) {
        if (_ctrl[action].length === 3) {
          return _ctrl[action](req, res, next);
        } else {
          return _ctrl[action](req, next);
        }
      }, function(result, next) {
        return async.reduce(decorators, result, function(result, fn, next) {
          var key;
          if (!fn.after) {
            return next(null, result);
          }
          key = _ctrl[action][fn.key] || _ctrl[action];
          if (fn.parallel) {
            fn(req, res, key, result);
            return next(null, result);
          } else {
            return fn(req, res, key, result, next);
          }
        }, next);
      }
    ], function(err, result) {
      res.err = err;
      res.result = result;
      return callback(req, res);
    });
  };

  module.exports = backbone;

}).call(this);
