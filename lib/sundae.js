// Generated by CoffeeScript 1.7.1
(function() {
  var Sundae, express, path, sundae;

  path = require('path');

  express = require('express');

  Sundae = (function() {
    function Sundae() {
      this._configs = [];
      this._params = {};
      this.request = require('./request');
      this.response = require('./response');
      this.router = require('./router');
      this.backbone = require('./backbone');
      this.BaseController = require('./controller');
      this.BaseHelper = require('./helper');
      this.BaseMailer = require('./mailer');
      this.set('mainPath', path.join(process.cwd(), 'app'));
    }

    Sundae.prototype.config = function(key, fn) {
      this._configs.push([key, fn]);
      return this;
    };

    Sundae.prototype.scaffold = function(mainPath) {
      mainPath = mainPath ? path.resolve(mainPath) : this.get('mainPath');
      this.set('mainPath', mainPath);
      this.config('express');
      this.config('request');
      this.config('response');
      this.config('database');
      this.config('router');
      return this;
    };

    Sundae.prototype.set = function(key, val) {
      this._params[key] = val;
      return this;
    };

    Sundae.prototype.get = function(key) {
      return this._params[key];
    };

    Sundae.prototype._config = function(key, fn) {
      var e, _ref;
      try {
        fn || (fn = require(path.join(this.get('mainPath'), 'config', key)));
      } catch (_error) {
        e = _error;
      }
      if (typeof fn === 'function') {
        return ((_ref = this[key]) != null ? typeof _ref.config === "function" ? _ref.config(this.app, fn) : void 0 : void 0) || fn(this.app);
      }
    };

    Sundae.prototype.run = function(callback) {
      var app, fn, key, _i, _len, _ref, _ref1;
      if (callback == null) {
        callback = function() {};
      }
      app = this.app = express();
      _ref = this._configs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], key = _ref1[0], fn = _ref1[1];
        this._config(key, fn);
      }
      return app.listen(this._params['port'] || app.get('port') || 7000, callback);
    };

    return Sundae;

  })();

  sundae = new Sundae;

  module.exports = sundae;

}).call(this);
