// Generated by CoffeeScript 1.6.3
(function() {
  var $errorHandler, CustomError, ErrorHandler, errorHandler, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require('lodash');

  CustomError = (function(_super) {
    __extends(CustomError, _super);

    function CustomError(msg, code, data) {
      this.msg = msg != null ? msg : '';
      this.code = code != null ? code : null;
      this.data = data != null ? data : {};
      CustomError.__super__.constructor.apply(this, arguments);
    }

    CustomError.prototype.toJSON = function() {
      return {
        code: this.toCode(),
        msg: this.toMsg(),
        data: this.toData()
      };
    };

    CustomError.prototype.toCode = function() {
      return Number(this.code.toString().slice(3));
    };

    CustomError.prototype.toStatus = function() {
      return Number(this.code.toString().slice(0, 3));
    };

    CustomError.prototype.toMsg = function() {
      return this.msg;
    };

    CustomError.prototype.toData = function() {
      return this.data;
    };

    CustomError.prototype.stringify = function() {
      return JSON.stringify(this.toJSON());
    };

    return CustomError;

  })(Error);

  ErrorHandler = (function() {
    function ErrorHandler() {
      this._codes = {
        succ: 200000,
        error: 500900,
        '404': 404901
      };
      this._msgs = {
        error: 'Unknown Error',
        succ: 'Success',
        '404': '404 Not Found'
      };
      Object.defineProperties(this, {
        'codes': {
          get: function() {
            return this._codes;
          },
          set: function(_codes) {
            return this._codes = _.extend(this._codes, _codes);
          }
        },
        'msgs': {
          get: function() {
            return this._msgs;
          },
          set: function(_msgs) {
            return this._msgs = _.extend(this._msgs, _msgs);
          }
        }
      });
    }

    ErrorHandler.prototype.register = function(errors) {
      if (typeof errors === 'function') {
        return errors.call(this);
      }
    };

    ErrorHandler.prototype.parse = function(err, data) {
      var $err, msg;
      if (typeof err === 'string' && (this.msgs[err] != null)) {
        msg = typeof this.msgs[err] === 'function' ? msg = this.msgs[err](data) : this.msgs[err];
        return $err = new CustomError(msg, this.codes[err], data);
      } else if (err instanceof CustomError) {
        return err;
      } else if (err != null) {
        return new CustomError(err, this.codes.error, data);
      } else {
        return new CustomError(this.msgs.succ, this.codes.succ, data);
      }
    };

    return ErrorHandler;

  })();

  $errorHandler = new ErrorHandler;

  errorHandler = function(errors) {
    if ('function' ? typeof errors : void 0) {
      $errorHandler.register(errors);
    }
    return $errorHandler;
  };

  module.exports = errorHandler;

}).call(this);
