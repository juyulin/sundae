// Generated by CoffeeScript 1.6.3
(function() {
  var Router, bundle, error, logger, path, router,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  path = require('path');

  logger = require('graceful-logger');

  bundle = require('./bundle');

  error = require('./error')();

  error.register(function() {
    this.codes = {
      methodNotFound: 500905
    };
    return this.msgs = {
      methodNotFound: function(method) {
        return "Method " + method + " not found!";
      }
    };
  });

  Router = (function() {
    var _baseDir, _resTypes;

    _baseDir = process.cwd();

    _resTypes = ['json', 'html'];

    function Router(sundae) {
      var _this = this;
      this.sundae = sundae;
      this.resType = 'json';
      this.appRoot = "" + (sundae.get('root') || _baseDir) + "/app";
      this.app = this.sundae.app;
      this.rests = [];
      this.callback = function(err, $bundle) {
        var ctrl, func, req, res, result;
        req = $bundle.req, res = $bundle.res, result = $bundle.result;
        $bundle.err = error.parse(err);
        ctrl = $bundle.get('ctrl');
        func = $bundle.get('func');
        _this._render({
          status: $bundle.err.toStatus(),
          req: req,
          res: res,
          template: "" + ctrl + "/" + func,
          result: result
        });
        return res.end('ok');
      };
      this._http404 = function(req, res, next) {
        return res.status(500).send('1');
        return _this._render({
          status: 404,
          req: req,
          res: res,
          template: "404",
          result: error.parse('404NotFound')
        });
      };
      this._http500 = function(err, req, rest, next) {
        return _this._render({
          status: 500,
          req: req,
          res: res,
          template: '500',
          result: error.parse('500ServerError')
        });
      };
      this._bindRest();
    }

    Router.prototype._render = function(data) {
      var req, res, resType, result, status, template, _ref;
      status = data.status, req = data.req, res = data.res, template = data.template, result = data.result;
      if (_ref = path.extname(req.url), __indexOf.call(_resTypes, _ref) >= 0) {
        resType = path.extname(req.url);
      } else {
        resType = this.resType;
      }
      switch (resType) {
        case 'json':
          return res.status(status).json(result);
        default:
          return res.status(status).render(template, result);
      }
    };

    Router.prototype._bindRest = function() {
      var _this = this;
      return ['get', 'post', 'put', 'delete'].map(function(method) {
        return _this[method] = function(route, options, callback) {
          var to;
          to = options.to;
          callback = callback || _this.callback;
          if (to == null) {
            return logger.err("Missing Destination in Route: " + route);
          }
          return _this._applyCtrl([method, route, to], callback);
        };
      });
    };

    Router.prototype._applyCtrl = function(rest, callback) {
      var $ctrl, ctrl, e, func, method, route, to, _ref;
      if (callback == null) {
        callback = function() {};
      }
      method = rest[0], route = rest[1], to = rest[2];
      _ref = to.split('@'), ctrl = _ref[0], func = _ref[1];
      func = func || 'index';
      try {
        $ctrl = require("" + this.appRoot + "/controllers/" + ctrl);
        if (typeof ($ctrl != null ? $ctrl[func] : void 0) !== 'function') {
          return false;
        }
      } catch (_error) {
        e = _error;
        return logger.err("Missing Controller " + ctrl);
      }
      this._pushRest(rest);
      return this.app[method](route, function(req, res) {
        var $bundle;
        $bundle = bundle('rest', req, res);
        $bundle.set('func', func).set('ctrl', ctrl);
        return $ctrl[func].call($ctrl, $bundle, function(err, result) {
          $bundle.set('result', result);
          return callback(err, $bundle);
        });
      });
    };

    Router.prototype._pushRest = function(rest) {
      return this.rests.push(rest);
    };

    Router.prototype.showRests = function() {
      return this.rests;
    };

    Router.prototype.root = function(to, callback) {
      callback = callback || this.callback;
      return this._applyCtrl(['get', '/', to], callback);
    };

    Router.prototype.resource = function(ctrl, callback) {
      var rest, restMap, _i, _len, _results;
      callback = callback || this.callback;
      restMap = [['get', "/" + ctrl, "" + ctrl + "@index"], ['get', "/" + ctrl + "/:id", "" + ctrl + "@show"], ['get', "/" + ctrl + "/:id/edit", "" + ctrl + "@edit"], ['get', "/" + ctrl + "/create", "" + ctrl + "@create"], ['post', "/" + ctrl, "" + ctrl + "@store"], ['put', "/" + ctrl + "/:id", "" + ctrl + "@update"], ['delete', "/" + ctrl + "/:id", "" + ctrl + "@destroy"]];
      _results = [];
      for (_i = 0, _len = restMap.length; _i < _len; _i++) {
        rest = restMap[_i];
        _results.push(this._applyCtrl(rest, callback));
      }
      return _results;
    };

    Router.prototype.http404 = function(handle) {
      if (typeof handle === 'function') {
        this._http404 = handle;
      }
      this.app.use(this._http404);
      return this;
    };

    Router.prototype.http500 = function(handle) {
      if (typeof handle === 'function' && handle.length === 4) {
        this._http500 = handle;
      }
      this.app.use(this._http500);
      return this;
    };

    Router.prototype.alias = function() {};

    return Router;

  })();

  router = function(sundae) {
    var _router;
    _router = function(routes) {
      var $router;
      $router = new Router(sundae);
      if (typeof routes === 'function') {
        return routes.call($router);
      }
    };
    return _router;
  };

  router.Router = Router;

  module.exports = router;

}).call(this);
